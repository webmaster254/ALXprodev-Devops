#!/bin/bash

# Script to retrieve data for multiple Pokémon and store in separate files
# Handles rate limiting with a delay between requests
# Includes robust error handling and retry logic

# Pokémon list
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# API base URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Error log
ERROR_LOG="batch_errors.txt"

# Delay between requests (in seconds) to avoid rate limiting
REQUEST_DELAY=1

# Maximum number of retry attempts
MAX_RETRIES=3

# Delay between retry attempts (in seconds)
RETRY_DELAY=2

# Function to make API request with retry logic
make_api_request() {
    local pokemon=$1
    local output_file=$2
    local url=$3
    local attempt=1
    local success=false
    
    while [ $attempt -le $MAX_RETRIES ] && [ "$success" = false ]; do
        echo "Attempt $attempt of $MAX_RETRIES for $pokemon..."
        
        # Make the API request
        curl -s -f -o "$output_file" "$url" 2> /dev/null
        
        # Check if the curl command was successful
        if [ $? -eq 0 ]; then
            # Verify the content is valid JSON and not an error message
            if jq empty "$output_file" 2>/dev/null; then
                echo "Success! Data for $pokemon has been saved to $output_file"
                success=true
                return 0
            else
                echo "Retrieved file is not valid JSON. Retrying..."
                rm -f "$output_file"  # Remove invalid file
            fi
        else
            echo "Attempt $attempt failed for $pokemon. Retrying in $RETRY_DELAY seconds..."
            if [ $attempt -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
            fi
        fi
        
        attempt=$((attempt + 1))
    done
    
    # If all attempts failed
    if [ "$success" = false ]; then
        echo "$(date): Error fetching data for $pokemon from $url after $MAX_RETRIES attempts" >> "$ERROR_LOG"
        echo "Failed to fetch data for $pokemon after $MAX_RETRIES attempts. Check $ERROR_LOG for details."
        return 1
    fi
}

echo "Starting batch retrieval of Pokémon data..."

# Create directory for the files if it doesn't exist
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Counter for successful and failed requests
SUCCESS_COUNT=0
FAIL_COUNT=0

# Process each Pokémon in the list
for pokemon in "${POKEMON_LIST[@]}"; do
    # Convert to lowercase
    pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
    
    # Output file
    output_file="${OUTPUT_DIR}/${pokemon_lower}.json"
    
    echo "Processing $pokemon..."
    
    # Make the API request with retry logic
    make_api_request "$pokemon" "$output_file" "${API_BASE_URL}/${pokemon_lower}"
    
    # Check if the API request was successful
    if [ $? -eq 0 ]; then
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    else
        FAIL_COUNT=$((FAIL_COUNT + 1))
    fi
    
    # Add delay between requests to avoid rate limiting
    if [ $((SUCCESS_COUNT + FAIL_COUNT)) -lt ${#POKEMON_LIST[@]} ]; then
        echo "Waiting ${REQUEST_DELAY} seconds before next request..."
        sleep $REQUEST_DELAY
    fi
done

# Summary
echo ""
echo "==== Batch Processing Summary ===="
echo "Total Pokémon processed: $((SUCCESS_COUNT + FAIL_COUNT))"
echo "Successful: $SUCCESS_COUNT"
echo "Failed: $FAIL_COUNT"

if [ $FAIL_COUNT -eq 0 ]; then
    echo "All Pokémon data retrieved successfully!"
    exit 0
else
    echo "Some requests failed. See $ERROR_LOG for details."
    exit 1
fi
